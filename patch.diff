--- a/backend_upgraded_hybrid_final2.js
+++ b/backend_upgraded_hybrid_final2.js
@@ -3,6 +3,8 @@
  */
 
 "use strict";
+
+require('dotenv').config();
 
 const express = require("express");
 const crypto = require("crypto");
@@ -14,13 +16,69 @@
 const Parser = require("rss-parser");
 const math = require("mathjs");
 const axios = require("axios");
+const path = require("path");
+const fs = require("fs");
 const cheerio = require("cheerio");
 const zlib = require("zlib");
 const expressGzip = require("compression");
 const app = express();
 
 app.use(express.json());
-app.use(expressGzip()); // Gzip for speed
+app.use(expressGzip());
+
+// 정적 파일 서빙 (public 우선, 없으면 루트 파일로 포워딩)
+const PUBLIC_DIR = path.join(__dirname, 'public');
+try { app.use(express.static(PUBLIC_DIR)); } catch {}
+
+const INDEX_CANDIDATES = [
+  path.join(__dirname, 'public', 'index_gemini_grok_final.html'),
+  path.join(__dirname, 'index_gemini_grok_final.html')
+];
+
+app.get('/', (req, res) => {
+  const indexPath = INDEX_CANDIDATES.find(p => {
+    try { return fs.existsSync(p); } catch { return false; }
+  }) || INDEX_CANDIDATES[0];
+  res.sendFile(indexPath);
+});
 
 /* 환경 변수 */
 const {
   NEWS_API_KEYS = "",
   TWITTER_BEARER_TOKEN = "",
   OPENAI_API_KEY = "",
   OPENAI_MODEL = "gpt-4o-mini",
   GOOGLE_PROJECT_ID = "",
   TRANSLATE_API_KEY = "",
   REDIS_URL = "redis://localhost:6379",
   NAVER_CLIENT_ID = "",
   NAVER_CLIENT_SECRET = "",
   YOUTUBE_API_KEY = "",
   NODE_ENV = "development"
 } = process.env;
 
+// GOOGLE_APPLICATION_CREDENTIALS가 JSON 문자열이면 파일로 저장하여 경로로 치환
+(function ensureGoogleCredsFile(){
+  try {
+    const gac = process.env.GOOGLE_APPLICATION_CREDENTIALS;
+    if (gac && gac.trim().startsWith('{')) {
+      const credPath = path.join(__dirname, 'google-credentials.json');
+      fs.writeFileSync(credPath, gac, { mode: 0o600 });
+      process.env.GOOGLE_APPLICATION_CREDENTIALS = credPath;
+      console.log("[diag] GOOGLE_APPLICATION_CREDENTIALS → 파일 경로 전환 완료");
+    }
+  } catch(e){
+    console.warn("[diag] GOOGLE_APPLICATION_CREDENTIALS 파일 전환 실패:", e.message);
+  }
+})();
+
 // 초기화
-const newsapi = new NewsAPI(NEWS_API_KEYS.split(",")[0]);
+const newsapi = new NewsAPI(process.env.NEWS_API_KEY || (NEWS_API_KEYS||"").split(",")[0] || "");
 const twitterClient = new TwitterApi(TWITTER_BEARER_TOKEN);
 const openai = OPENAI_API_KEY ? new OpenAI({ apiKey: OPENAI_API_KEY }) : null;
-const translateClient = new TranslationServiceClient({ keyFilename: TRANSLATE_API_KEY });
-const redisClient = redis.createClient({ url: REDIS_URL });
-redisClient.connect().catch(console.error);
+const translateClient = new TranslationServiceClient();
+const useTLS = typeof REDIS_URL === "string" && REDIS_URL.startsWith("rediss://");
+const redisClient = redis.createClient({
+  url: REDIS_URL,
+  socket: { tls: useTLS, reconnectStrategy: (r) => Math.min(1000 * 2 ** r, 30000) }
+});
+redisClient.on("error", (e) => console.error("[redis] error:", e.message));
+(async ()=>{ try { await redisClient.connect(); } catch(e){ console.error("[redis] connect failed:", e.message);} })();
 const rssParser = new Parser();
 
 /* 상수/유틸 */
@@ -630,7 +678,35 @@
 function cacheControl(_req, res, next) { res.set("Cache-Control","public, max-age=60, stale-while-revalidate=300"); next(); }
 
-app.get("/healthz", (_req, res) => {
-  res.json({
-    status:"ok",
-    env:NODE_ENV,
-    uptime:process.uptime(),
-    time:new Date().toISOString(),
-    cache:{ policy:"public, max-age=60, stale-while-revalidate=300", etagEnabled:true },
-    version:"1.0.0"
-  });
-});
+// 키 보유 여부 진단
+const HAS_NEWS_KEY = !!(process.env.NEWS_API_KEY || process.env.NEWSAPI_KEY || NEWS_API_KEYS);
+const HAS_TWITTER  = !!process.env.TWITTER_BEARER_TOKEN;
+app.get("/_diag/keys", (req, res) => {
+  res.json({ NEWS_API_KEY: HAS_NEWS_KEY, TWITTER_BEARER_TOKEN: HAS_TWITTER });
+});
+
+// Redis 진단
+app.get("/_diag/redis", async (req, res) => {
+  try { return res.json({ ok: true, ping: await redisClient.ping() }); }
+  catch (e) { return res.status(500).json({ ok: false, error: e.message }); }
+});
+
+// 헬스 체크 확장
+app.get("/healthz", async (_req, res) => {
+  let redisStatus = "NG";
+  try { redisStatus = await redisClient.ping(); } catch {}
+  res.json({
+    status:"ok",
+    env:NODE_ENV,
+    uptime:process.uptime(),
+    time:new Date().toISOString(),
+    cache:{ policy:"public, max-age=60, stale-while-revalidate=300", etagEnabled:true },
+    version:"1.0.0",
+    keys:{ NEWS_API_KEY: HAS_NEWS_KEY, TWITTER_BEARER_TOKEN: HAS_TWITTER },
+    redis: redisStatus
+  });
+});
 
--- a/package.json
+++ b/package.json
@@ -18,7 +18,8 @@
     "@google-cloud/translate": "^8.0.0",
     "redis": "^4.6.7",
     "rss-parser": "^3.13.0",
-    "twitter-api-v2": "^1.15.0"
+    "twitter-api-v2": "^1.15.0",
+    "dotenv": "^16.4.5"
   },
   "engines": {
     "node": ">=18"
--- a/index_gemini_grok_final.html
+++ b/index_gemini_grok_final.html
@@
-        const BASE_URL = 'http://localhost:3000';
+        const BASE_URL = location.origin;
--- a/.gitignore
+++ b/.gitignore
@@ -0,0 +1,8 @@
+node_modules
+.env
+app.log
+*.log
+.DS_Store
+# Google SA file written at runtime
+google-credentials.json
+*.credentials.json
--- a/.gitignore.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-node_modules
-.env
-app.log
-*.log
-.DS_Store
--- a/Procfile
+++ b/Procfile
@@ -0,0 +1,1 @@
+web: npm start
--- a/Procfile.txt
+++ /dev/null
@@ -1,1 +0,0 @@
-web: npm start

